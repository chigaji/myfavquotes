// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package doc

import "github.com/swaggo/swag"

const docTemplate_swagger = `{
    "schemes": {{ marshal .Schemes }},
    "openapi": "3.0.3",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Ronald",
            "email": "chigaji@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "tags": [
    {
      "name": "Home",
      "description": "Home page"
    },
    {
      "name": "All Quotes",
      "description": "All the quotes"
    }
  ],
  "paths": {
    "/api/v1/home": {
      "get": {
        "tags": [
          "Home"
        ],
        "summary": "Home page",
        "operationId": "homePage",
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/api/v1/quotes/{type}": {
      "post": {
        "tags": [
          "All Quotes"
        ],
        "summary": "create a quote of a given type",
        "operationId": "createQuote",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "quote type",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "create Quote request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createQuote"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          }
        }
      },
      "get": {
        "tags": [
          "All Quotes"
        ],
        "summary": "Get all quotes of a given type",
        "operationId": "getQuotes",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "quote type",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          }
        }
      }
    },
    "/api/v1/quotes/{type}/{id}": {
      "put": {
        "tags": [
          "All Quotes"
        ],
        "summary": "edit a given quote of a type using a given id",
        "operationId": "editQuotes",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "quote type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "quote id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Edit Quote request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/editQuote"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          }
        }
      }
    },
    "/api/v1/quote/{type}": {
      "get": {
        "tags": [
          "All Quotes"
        ],
        "summary": "get a random quote of a given type",
        "operationId": "getQuote",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "quote type",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          }
        }
      }
    },
    "/api/v1/quote/{type}/{id}": {
      "get": {
        "tags": [
          "All Quotes"
        ],
        "summary": "get a quote of a given type by id",
        "operationId": "getQuoteById",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "quote type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "quote id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "All Quotes"
        ],
        "summary": "Delete a quote of a given type by Id",
        "operationId": "deleteQuoteById",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "quote type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "quote id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "404": {
            "description": "Not found",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "createQuote": {
        "type": "object",
        "properties": {
          "quote": {
            "type": "string"
          }
        },
        "example": {
          "quote": "Pain of Discipline OR Pain of Regret"
        }
      },
      "editQuote": {
        "type": "object",
        "properties": {
          "quote": {
            "type": "string"
          }
        },
        "example": {
          "quote": "Pain of Discipline OR Pain of Regret"
        }
      }
    },
    "securitySchemes": {
      "bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}`

// SwaggerInfo_swagger holds exported Swagger Info so clients can modify it
var SwaggerInfo_swagger = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:4000",
	BasePath:         "",
	Schemes:          []string{"http"},
	Title:            "My Favorite Quotes",
	Description:      "This is an API for My favorite quotes",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate_swagger,
}

func init() {
	swag.Register(SwaggerInfo_swagger.InstanceName(), SwaggerInfo_swagger)
}
